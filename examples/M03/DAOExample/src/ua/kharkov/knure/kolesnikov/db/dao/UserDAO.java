package ua.kharkov.knure.kolesnikov.db.dao;

import ua.kharkov.knure.kolesnikov.db.entity.User;

/**
 * Интерфейс манипуляции данными в таблице users. Классическая схема - методы
 * CRUD (create, read, update, delete). Однако, иногда пишут только те, которые
 * нужны.<br/>
 * Каждой таблице - свой интерфейс.<br/>
 * Кроме того, если данные методы участвуют в транзакциях, то первым параметром
 * методов пишут соединение (транзакции реализуют на одном и том же соединении).
 * 
 * <pre>
 * void create(Connection con, User user);
 * </pre
 * 
 * @author Dmitry Kolesnikov
 * 
 */
public interface UserDAO {
	/**
	 * Метод создания пользователя в базе данных. После выполнения метода объект
	 * user содержит значение идентификатора (id), эта информация приходит со
	 * стороны СУБД.<br/>
	 * Другой вариант метода - возвращает long, т.е. идентификатор.
	 * 
	 * @param user
	 *            объект, который содержит информацию о пользователе без
	 *            идентификатора. Обычно в таблицах идентификатор - первичный
	 *            ключ, который автоинкрементирует СУБД.
	 */
	void create(User user);

	/**
	 * Метод получения пользователя из базы данных.
	 * 
	 * @param id
	 *            идентификатор пользователя (первичный уникальный ключ)
	 * @return объект, который содержит значения всех полей из таблицы users.
	 */
	User read(long id);

	/**
	 * Метод обновления данных пользователя в базе данных.
	 * 
	 * @param user
	 *            объект, который содержит данные пользователя (обычно они были
	 *            изменены, т.е. получили объект user, изменили какие то данные
	 *            в нем, затем хотим сохранить эти изменения в базе данных),
	 *            идентификатор должен присутствовать.
	 * @return true, если изменения в базе прошли успешно, false - в противном
	 *         случае.
	 */
	boolean update(User user);

	/**
	 * Метод удаления пользователя из таблицы users.<br/>
	 * Другой вариант - на вход метода подают идентификатор.
	 * 
	 * @param user
	 *            пользователь, который будет удален.
	 * @return true, если изменения в базе прошли успешно, false - в противном
	 *         случае.
	 */
	boolean delete(User user);
}

/**
 * Демонстрирует работу с интернированными строками.<br/>
 * Дополнительно см. документацию к методу {@link String#intern()}
 * 
 * @author Dmitry Kolesnikov
 * 
 */
public class StringInternDemo {

	public static void main(String[] args) {

		// (1) s - ссылается на пулированную строку
		String s = "abc";
		// pool: "abc"
		// все строковые литералы ссылаются на пулированные строки

		// s.intern вернет ссылку на "abc", т.е. this
		System.out.println(s == s.intern());
		// ===> true

		// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

		// (2) s - ссылается на НЕпулированную строку [bc]
		s = "abc".substring(1);
		// pool: "abc"

		// в пуле не существует эквивалента по equals объекту [bc]
		// s.intern положит объект [bc] в пул и вернет this
		System.out.println(s == s.intern());
		// ===> true
		// pool: "abc", [bc]

		// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

		// (3) s - ссылается на НЕпулированную строку [c]
		s = "abc".substring(2);
		// pool: "abc", [bc]

		/*****************************************/
		// кладем для строки [c] эквивалент по equals в пул
		// (просто пишем любой код, чтобы литерал "c" попал в байт код)

		"c".toString(); // <=== TRY TO COMMENT THIS LINE!!!

		// после выполнения этой строки в пуле есть объект "c"
		// pool: "abc", [bc], "c"
		/****************************************/

		// s.intern вернет ссылку на "c", которая не совпадает с [c]
		System.out.println(s == s.intern());
		// ===> false

		// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

		/*
		 * Замечание: после выполнения кода пул содержит "abc", [bc], "c"
		 * 
		 * Если далее в коде будет использован литерал "bc", то он будет
		 * ссылаться на пулированную строку [bc].
		 */
	}
}